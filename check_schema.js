const { createClient } = require('@supabase/supabase-js')

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

const supabase = createClient(supabaseUrl, supabaseAnonKey)

async function checkSchema() {
    console.log('üîç Checking database schema...')
    
    // Check profiles table
    console.log('\nüìã Profiles table:')
    const { data: profiles, error: profilesError } = await supabase
        .from('profiles')
        .select('*')
        .limit(1)
    
    if (profilesError) {
        console.log('‚ùå Profiles error:', profilesError.message)
    } else if (profiles && profiles.length > 0) {
        console.log('‚úÖ Profiles columns:', Object.keys(profiles[0]))
    } else {
        console.log('‚ö†Ô∏è Profiles table is empty')
    }
    
    // Check highlights table
    console.log('\nüé¨ Highlights table:')
    const { data: highlights, error: highlightsError } = await supabase
        .from('highlights')
        .select('*')
        .limit(1)
    
    if (highlightsError) {
        console.log('‚ùå Highlights error:', highlightsError.message)
    } else if (highlights && highlights.length > 0) {
        console.log('‚úÖ Highlights columns:', Object.keys(highlights[0]))
    } else {
        console.log('‚ö†Ô∏è Highlights table is empty')
    }
    
    // Check challenges table
    console.log('\nüèÜ Challenges table:')
    const { data: challenges, error: challengesError } = await supabase
        .from('challenges')
        .select('*')
        .limit(1)
    
    if (challengesError) {
        console.log('‚ùå Challenges error:', challengesError.message)
    } else if (challenges && challenges.length > 0) {
        console.log('‚úÖ Challenges columns:', Object.keys(challenges[0]))
    } else {
        console.log('‚ö†Ô∏è Challenges table is empty')
    }
    
    // Check stats table
    console.log('\nüìä Stats table:')
    const { data: stats, error: statsError } = await supabase
        .from('stats')
        .select('*')
        .limit(1)
    
    if (statsError) {
        console.log('‚ùå Stats error:', statsError.message)
    } else if (stats && stats.length > 0) {
        console.log('‚úÖ Stats columns:', Object.keys(stats[0]))
    } else {
        console.log('‚ö†Ô∏è Stats table is empty')
    }
    
    // Check likes table
    console.log('\n‚ù§Ô∏è Likes table:')
    const { data: likes, error: likesError } = await supabase
        .from('likes')
        .select('*')
        .limit(1)
    
    if (likesError) {
        console.log('‚ùå Likes error:', likesError.message)
    } else if (likes && likes.length > 0) {
        console.log('‚úÖ Likes columns:', Object.keys(likes[0]))
    } else {
        console.log('‚ö†Ô∏è Likes table is empty')
    }
}

checkSchema().catch(console.error)